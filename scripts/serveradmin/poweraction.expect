#!/usr/bin/expect -f
###############################################################################
#
# poweraction.expect
#
# Expect script to power up/down/off a Dell server using either the DRAC 
# racadm command or the ssh console poweroff command.
#
#  - powerup: use DRAC to bring the machine to life
#  - poweroff: use SSH to ESX to gracefully bring down the machine
#  - powerdownfuckit: use DRAC to pull the cords from the box
#
# The 'sysadmin' user must exist on the DRAC card for this to work in its
# current incarnation.
#
###############################################################################
#
# VALID ACTIONS:
# (Dell racadm serveraction)
#
# powerdown       - power server off
# powerup         - power server on
# powercycle      - perform server power cycle
# hardreset       - force hard server power reset
# powerstatus     - display current power status of server
#
###############################################################################
#
# TODO:
#
#   * Adjust to use user account specified in the password file, as in:
#     user:password
#   * Encrypt the contents of racadm.pwd
#   * Clean up the switch{} section and make it more modular
#
###############################################################################

# Set some variables
set timeout 60
set homedir $::env(HOME)
set pwdfile $homedir/racadm.pwd
set host [lindex $argv 0]
set action [lindex $argv 1]

# Make sure they gave us an action to perform
if { [llength $argv] < 2} {
    puts ""
    puts "poweraction.expect"
    puts "Expect script to power up/down/off a Dell server"
    puts ""
    puts "Usage: serveraction <host> <action>"
    puts "where <action> is one of:"
    puts "  powerup: use DRAC to bring the machine to life"
    puts "  poweroff: use SSH to ESX to gracefully bring down the machine"
    puts "  powerdownfuckit: use DRAC to pull the cords from the box"
    puts ""
    exit 1
}

# if the password file exists, read the password from it
if { [file exists $pwdfile] } {
    set f [open $pwdfile]
    set password [read $f]]
    close $f
} else {
    puts "pwdfile: $pwdfile does not exist"
    exit 1
}

# do what we're asked to
switch $action {

    powerup {
        spawn ssh sysadmin@$host-drac

        expect "password*"
        send "$password\r"

        expect "$*"
        send "racadm serveraction powerup\r"

        expect "$*"
        send "exit\r"

        expect eof
        exit
    }

    poweroff {
        spawn ssh sysadmin@$host

        expect "Password:*"
        send "$password\r"

        expect "*esx*"
        send "poweroff\r"

        expect "*esx*"
        send "exit\r"

        expect eof
        exit
    }

    powerdownfuckit {
        spawn ssh sysadmin@$host-drac

        expect "password*"
        send "$password\r"

        expect "$*"
        send "racadm serveraction powerdown\r"

        expect "$*"
        send "exit\r"

        expect eof
        exit
    }
}

